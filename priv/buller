#!/usr/bin/env escript
%% -*- erlang -*-
%%  send buller commands
%%
-mode(compile).
-export([main/1]).

-define(BULLER_VSN, "v1").
-define(BULLER_URL, "http://127.0.0.1:1235").
-define(is_digit(C), (((C)>=$0) andalso ((C)=<$9))).

main([]) ->
    usage();
main(Args)->
    (catch error_logger:tty(false)),
    Options0 = process_args(Args),
    Options = group_args(Options0),
    Url = get_url(Options),
    send_argl(Url, Options),
    ok.

process_args([]) ->
    [];
process_args(Args) ->
    Options = parse_opts(Args),
    case getbool("help", Options) of
	true -> usage();
	false ->
	    case getbool("h", Options) of
		true -> usage();
		false -> Options
	    end
    end.

send_argl(Url, [{argl,Name,Args}|Options]) ->
    Args1 = [{list_to_atom(Key),Value} || {Key,Value} <- Args],
    Url1 = Url++"/"++Name,
    io:format("Post: ~s [~p]\n", [Url1, Args1]),
    Res = rester_http:wpost(Url1,
			    [{'Content-Type', "application/json"}],
			    Args1),
    io:format("Res: ~p\n", [Res]),
    send_argl(Url, Options);
send_argl(Url, [_|Options]) ->
    send_argl(Url, Options);
send_argl(Url, []) ->
    ok.

usage() ->
    io:format("usage: buller [<options>] <command> ...\n"
	      " OPTIONS\n"
	      "   -h                help\n"
	      "   -d                debug mode\n"
	      "   --vsn v1          api version (" ?BULLER_VSN ")\n"
	      "   --url <url>       buller server (" ?BULLER_URL ")\n"
	      "   --user|-u user:pass  authentication\n"
	      "   --basic           use basic authentication\n"
	      "   --digest          use digest authentication\n"
	      "   --negotiate       use the method selected by server\n"
	      "  <command>\n"
	      "  draw_pixel x,y,color\n"
	      "  draw_text x,y,font-size,font-name,font,text,color\n"
	      "  draw_image x,y,width,height,sx,sy,swidth,sheight,src\n"
	      "  draw_video x,y,width,height,sx,sy,swidth,sheight,src\n"
	      "  draw_rect x,y,width,height,color\n"
	      "  clear x,y,width,height\n"
	      %% SVG
	      "  rect x,y,width,height,...\n"
	      "  circle cx,cy,r,...\n"
	      "  ellipse cx,cy,rx,ry,...\n"
	      "  line x1,y1,x2,y2,...\n"
	      "  polygon points,...\n"
	      "  polyline points,...\n"
	      "  path d,...\n"
	      "  text x,y,font-size,font-name,font,text=<string>\n"
	      "  set id,...\n"
	      "  remove id,...\n"
	     ).

if_debug(Options, Fun) ->
    case proplists:get_value(debug, Options, false) of
	true ->
	    Fun();
	false ->
	    ok
    end.

get_url(Options) ->
    Vsn = get_vsn(Options),
    Url = get_url_(Options),
    try rester_url:parse(Url, sloppy) of
	_UrlTuple ->
	    io:format("using url ~s\n", [Url]),
	    url_join(Url, Vsn)
    catch
	error:_ ->
	    io:format("buller: can not parse url ~s\n", [Url]),
	    halt(1)
    end.

url_join(Url, Path) ->
    case lists:last(Path) of
	$/ -> Url ++ Path;
	_ -> Url ++ "/" ++ Path
    end.

get_url_(Options) ->
    case getopt("url",Options,undefined) of
	undefined ->
	    Url0 = os:getenv("BULLER_URL"),
	    if Url0 =:= ""; Url0 =:= false ->
		    ?BULLER_URL;
	       true ->
		    Url0
	    end;
	Url ->
	    Url
    end.

get_vsn(Options) ->
    getopt("vsn", Options, ?BULLER_VSN).
	
-include("../src/opts.hrl").

to_list(Bin) when is_binary(Bin) -> binary_to_list(Bin);
to_list(Int) when is_integer(Int) -> integer_to_list(Int);
to_list(Atom) when is_atom(Atom) -> atom_to_list(Atom);
to_list(Float) when is_integer(Float) -> io_lib:format("~.1f", [Float]);
to_list(List) when is_list(List) -> List;
to_list(Term) -> io_lib:format("~p", [Term]).
